class Solution {
public:
    bool possibleBipartition(int N, vector<vector<int>>& dislikes) {
        vector <vector < int >> g (N + 1 , vector < int > (N + 1 ));
         for (auto dislike: dislikes) {
            g [dislike [ 0 ]] [dislike [ 1 ]] = 1 ;
            g [dislike [ 1 ]] [dislike [ 0 ]] = 1 ;
        }
        vector < int > colors (N + 1 );
         for ( int i = 1 ; i <= N; ++ i) {
             if (colors [i] == 0 &&! helper (g, i, 1 , colors)) return  false ;
        }
        return  true ;
    }
    bool helper (vector <vector < int >> & g, int cur, int color, vector < int > & colors) {
        colors [cur] = color;
         for ( int i = 0 ; i <g.size (); ++ i) {
             if (g [cur] [i] == 1 ) {
                 if (colors [i] == color ) return  false ;
                 if (colors [i] == 0 &&! helper (g, i, -color, colors)) return  false ;
            }
        }
        return  true ;
    }
};

