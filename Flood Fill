class Solution {
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
    if(image.empty()) return image;
    int n = image.size();
    int m = image[0].size();
    vector<vector<bool>> visited(n, vector<bool>(m, false));
    int initial = image[sr][sc];
    dfs(image, visited, sr, sc, newColor, n, m, initial);
    return image;
}

void dfs(vector<vector<int>>& image, vector<vector<bool>>& visited, int i, int j, int newColor, int n, int m, int initial){
    if(visited[i][j] || image[i][j] != initial) return;
    image[i][j] = newColor;
    visited[i][j] = true;
    if(i+1 < n){dfs(image, visited, i+1, j, newColor, n, m, initial);}
    if(i-1 >= 0){dfs(image, visited, i-1, j, newColor, n, m, initial);}
    if(j+1 < m){dfs(image, visited, i, j+1, newColor, n, m, initial);}
    if(j-1 >= 0){dfs(image, visited, i, j-1, newColor, n, m, initial);}
    }
};
